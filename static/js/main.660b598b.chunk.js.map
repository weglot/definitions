{"version":3,"sources":["Editor.js","utils.js","App.js","serviceWorker.js","index.js"],"names":["cmOptions","theme","height","viewportMargin","Infinity","mode","name","json","statementIndent","lineNumbers","lineWrapping","indentWithTabs","tabSize","Editor","formData","onChange","useState","schema","setSchema","valid","setValid","useEffect","data","JSON","stringify","onEdit","code","parsed","parse","e","cls","icon","className","value","autoCursor","options","cm","meta","resolveRefs","refs","common","condition","jp","apply","matched","schemas","Object","keys","regex","RegExp","join","replace","assign","definitions","App","setFormData","translations","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.660b598b.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { UnControlled as CodeMirror } from \"react-codemirror2\";\nimport \"codemirror/mode/javascript/javascript\";\nimport \"codemirror/lib/codemirror.css\";\n\nconst cmOptions = {\n  theme: \"default\",\n  height: \"auto\",\n  viewportMargin: Infinity,\n  mode: {\n    name: \"javascript\",\n    json: true,\n    statementIndent: 2,\n  },\n  lineNumbers: true,\n  lineWrapping: true,\n  indentWithTabs: false,\n  tabSize: 2,\n};\n\nexport default function Editor({ formData, onChange }) {\n  const [schema, setSchema] = useState(\"\");\n  const [valid, setValid] = useState(false);\n\n  useEffect(() => {\n    const data = JSON.stringify(formData, null, 2);\n    if (schema !== data) {\n      setSchema(data);\n      setValid(true);\n    }\n  }, [formData]);\n\n  const onEdit = (code) => {\n    try {\n      const parsed = JSON.parse(code);\n      setValid(true);\n      if (onChange) {\n        onChange(parsed);\n      }\n    } catch (e) {\n      setValid(false);\n    }\n  };\n\n  const cls = valid ? \"valid\" : \"invalid\";\n  const icon = valid ? \"ok\" : \"remove\";\n\n  return (\n    <div className=\"panel panel-default\">\n      <div className=\"panel-heading\">\n        <span className={`${cls} glyphicon glyphicon-${icon}`} /> &nbsp;Schema\n      </div>\n      <CodeMirror\n        value={schema}\n        autoCursor={false}\n        options={cmOptions}\n        onChange={(cm, meta, code) => code !== schema && onEdit(code)}\n      />\n    </div>\n  );\n}","import jp from \"jsonpath\";\n\nimport common from \"@weglot/technology-rules/schemas/common.schema.json\";\nimport condition from \"@weglot/technology-rules/schemas/condition.schema.json\";\n\nexport function resolveRefs(schema) {\n  const refs = { common, condition };\n  jp.apply(schema, \"$..['$ref']\", (matched) => {\n    const schemas = Object.keys(refs);\n    const regex = new RegExp(`(${schemas.join(\"|\")}).schema.json`, \"g\");\n    return matched.replace(regex, \"\");\n  });\n  Object.assign(schema.definitions, common.definitions, condition.definitions);\n  return schema;\n}\n","import React, { useState } from \"react\";\nimport Form from \"react-jsonschema-form\";\nimport translations from \"@weglot/technology-rules/schemas/translations.schema.json\";\n\nimport Editor from \"./Editor\";\nimport { resolveRefs } from \"./utils\";\n\nexport default function App() {\n  const [formData, setFormData] = useState({});\n\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"row\">\n        <div className=\"col-md-6 col-sm-12\">\n          <Editor formData={formData} onChange={setFormData} />\n        </div>\n        <div className=\"col-md-6 col-sm-12\">\n          <Form\n            schema={resolveRefs(translations)}\n            onChange={({ formData }) => setFormData(formData)}\n            formData={formData}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}