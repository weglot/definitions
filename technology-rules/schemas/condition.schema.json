{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "condition.schema.json",
  "definitions": {
    "ConditionArray": {
      "title": "Conditions",
      "description": "These are the conditions that must be satisfied before your custom translation rule is applied.",
      "type": "array",
      "default": [],
      "items": {
        "$ref": "#/definitions/Condition"
      }
    },
    "ConditionArrayXml": {
      "title": "Conditions",
      "description": "These are the conditions that must be satisfied before your custom translation rule is applied.",
      "type": "array",
      "default": [],
      "items": {
        "$ref": "#/definitions/ConditionXml"
      }
    },
    "Condition": {
      "description": "",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "title": "Condition type",
          "type": "string",
          "description": "What kind of condition do you want to match for?",
          "oneOf": [
            {
              "const": "FROM_DEFINITION_ID",
              "title": "Match the defintion that created this resource"
            },
            {
              "const": "PATH_MATCH",
              "title": "Match the URL path"
            },
            {
              "const": "URI_MATCH",
              "title": "Match the whole original URL"
            },
            {
              "const": "TECHNOLOGY_ID",
              "title": "Match the technology of the website CMS"
            },
            {
              "const": "HEADERS_SIGNATURE",
              "title": "Check the incoming website headers"
            },
            {
              "const": "URL_TYPE",
              "title": "Check if the site is on subdirectory or subdomain integration"
            }
          ]
        },
        "payload": {
          "title": ""
        }
      },
      "dependencies": {
        "type": {
          "oneOf": [
            {
              "properties": {
                "type": {
                  "const": "FROM_DEFINITION_ID"
                },
                "payload": {
                  "type": "string",
                  "title": "ID of the parent definition"
                }
              }
            },
            {
              "properties": {
                "type": {
                  "const": "URI_MATCH"
                },
                "payload": {
                  "description": "Match the full URL of the resource we want to translate (without query string)",
                  "$ref": "#/definitions/PathMatch"
                }
              }
            },
            {
              "properties": {
                "type": {
                  "const": "PATH_MATCH"
                },
                "payload": {
                  "description": "Match the path of the resource we want to translate",
                  "$ref": "#/definitions/PathMatch"
                }
              }
            },
            {
              "properties": {
                "type": {
                  "const": "TECHNOLOGY_ID"
                },
                "payload": {
                  "description": "Only applies for pages served by the selected technology",
                  "$ref": "common.schema.json#/definitions/TechnologyID"
                }
              }
            },
            {
              "properties": {
                "type": {
                  "const": "HEADERS_SIGNATURE"
                },
                "payload": {
                  "description": "Detect using the incoming headers from the source",
                  "$ref": "#/definitions/HeadersSignature"
                }
              }
            },
            {
              "properties": {
                "type": {
                  "const": "URL_TYPE"
                },
                "payload": {
                  "type": "string",
                  "enum": [
                    "subdirectory",
                    "subdomain"
                  ]
                }
              }
            }
          ]
        }
      },
      "required": [
        "payload",
        "type"
      ]
    },
    "ConditionXml": {
      "description": "",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "title": "Condition type",
          "type": "string",
          "oneOf": [
            {
              "const": "FROM_DEFINITION_ID",
              "title": "Match the defintion that created this resource"
            },
            {
              "const": "PATH_MATCH",
              "title": "Match the URL path"
            },
            {
              "const": "URI_MATCH",
              "title": "Match the entire original URL"
            },
            {
              "const": "TECHNOLOGY_ID",
              "title": "Match the technology of the website CMS"
            },
            {
              "const": "HEADERS_SIGNATURE",
              "title": "Check the incoming website headers"
            },
            {
              "const": "XML_ATTRIBUTE_VALUE",
              "title": "Match the value of an XML tag attribute"
            },
            {
              "const": "XML_ROOT_ELEMENT_NAME",
              "title": "Test if an XML element is present and at the document root"
            },
            {
              "const": "URL_TYPE",
              "title": "Check if the site is using subdirectory or subdomain"
            }
          ]
        },
        "payload": {
          "title": ""
        }
      },
      "dependencies": {
        "type": {
          "oneOf": [
            {
              "properties": {
                "type": {
                  "const": "FROM_DEFINITION_ID"
                },
                "payload": {
                  "type": "string",
                  "title": "ID of the parent definition"
                }
              }
            },
            {
              "properties": {
                "type": {
                  "const": "URI_MATCH"
                },
                "payload": {
                  "description": "Match the full URL of the resource we want to translate (without query string)",
                  "$ref": "#/definitions/PathMatch"
                }
              }
            },
            {
              "properties": {
                "type": {
                  "const": "PATH_MATCH"
                },
                "payload": {
                  "description": "Match the path of the resource we want to translate",
                  "$ref": "#/definitions/PathMatch"
                }
              }
            },
            {
              "properties": {
                "type": {
                  "const": "TECHNOLOGY_ID"
                },
                "payload": {
                  "description": "Only applies for pages served by the selected technology",
                  "$ref": "common.schema.json#/definitions/TechnologyID"
                }
              }
            },
            {
              "properties": {
                "type": {
                  "const": "HEADERS_SIGNATURE"
                },
                "payload": {
                  "description": "Detect using the incoming headers from the source",
                  "$ref": "#/definitions/HeadersSignature"
                }
              }
            },
            {
              "properties": {
                "type": {
                  "const": "XML_ATTRIBUTE_VALUE"
                },
                "payload": {
                  "additionalProperties": false,
                  "type": "object",
                  "properties": {
                    "selector": {
                      "title": "CSS selector",
                      "type": "string"
                    },
                    "attr": {
                      "title": "Attribute name",
                      "type": "string"
                    },
                    "value": {
                      "type": "string",
                      "title": "Attribute value"
                    }
                  }
                }
              }
            },
            {
              "properties": {
                "type": {
                  "const": "XML_ROOT_ELEMENT_NAME"
                },
                "payload": {
                  "type": "object",
                  "properties": {
                    "selector": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            {
              "properties": {
                "type": {
                  "const": "URL_TYPE"
                },
                "payload": {
                  "type": "string",
                  "enum": [
                    "subdirectory",
                    "subdomain"
                  ]
                }
              }
            }
          ]
        }
      },
      "required": [
        "payload",
        "type"
      ]
    },
    "PathMatch": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "title": "What check do you want to apply to the path?",
          "type": "string",
          "oneOf": [
            {
              "const": "START_WITH",
              "title": "The URL starts with..."
            },
            {
              "const": "END_WITH",
              "title": "The URL ends with..."
            },
            {
              "const": "CONTAIN",
              "title": "The URL contains..."
            },
            {
              "const": "IS_EXACTLY",
              "title": "The URL is exactly..."
            },
            {
              "const": "MATCH_REGEX",
              "title": "The URL matches the regex pattern..."
            }
          ]
        },
        "value": {
          "title": "Matching string value",
          "description": "The value you want to apply the test above for, e.g., /blog.",
          "type": "string"
        }
      },
      "required": [
        "type",
        "value"
      ],
      "title": "Path Match"
    },
    "HeadersSignature": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "headerName": {
          "title": "Header name",
          "type": "string"
        },
        "regexMatch": {
          "title": "",
          "type": "string",
          "description": "If provided, the header value should match this RegExp string. Leave empty to only check for presence"
        }
      },
      "required": [
        "headerName"
      ]
    }
  }
}